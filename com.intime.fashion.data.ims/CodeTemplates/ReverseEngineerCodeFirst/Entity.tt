<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Collections.Generic;

namespace Yintai.Hangzhou.Data.Models
{
    public partial class <#= efHost.EntityType.Name #>Entity : Yintai.Architecture.Common.Models.BaseEntity
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(efHost.EntityType) #>Entity()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
            this.<#= code.Escape(navProperty) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>Entity>();
<#
        }
#>
        }

<#
    }

    foreach (var property in efHost.EntityType.Properties)
    {
#>
        <#= Accessibility.ForProperty(property) #> <#= code.Escape(property.TypeUsage) #> <#= code.Escape(property) #> { get; set; }
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>Entity> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>Entity <#= code.Escape(navProperty) #> { get; set; }
<#
        }
    }
#>

        #region Overrides of BaseEntity

        /// <summary>
        /// KeyMemberId
        /// </summary>
        public override object EntityId
        {       
<#
         if (efHost.EntityType.KeyMembers.Count() == 0)
         {
#>
            get { throw new NotImplementedException(); }
<#
         }
#>
<#
            else if (efHost.EntityType.KeyMembers.Count() == 1)
            {
#>
                get { return <#= efHost.EntityType.KeyMembers.Single().Name #>; }
<#
            }
            else
            {
#>
                get { return new Dictionary<string, object> (<#= efHost.EntityType.KeyMembers.Count()#>){
                <#= string.Join(", ", efHost.EntityType.KeyMembers.Select(m => String.Format("{{\"{0}\",{0}}}",m.Name))) #> 
                };}
<#
            }
#> 
        }

        #endregion
    }
}
